name: Vib Build (Podman)

on:
  push:
    branches:
      - 'dev'
    tags:
      - '*'
  workflow_dispatch:
  pull_request:

env:
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  # Pin the version to the one you're using
  VIB_VERSION: v1.0.2

jobs:
  verify-image:
    runs-on: ubuntu-latest

    steps:
    - name: Verify Base Image Integrity
      if: ${{ github.ref_type == 'tag' }}
      run:
        gh attestation verify oci://ghcr.io/vanilla-os/core:main --owner Vanilla-OS
      env:
        GH_TOKEN: ${{ github.token }}

  build:
    runs-on: ubuntu-latest
    needs: [verify-image]
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
    - uses: actions/checkout@v5

    - name: Change tag in recipe
      if: ${{ github.ref_type == 'tag' }}
      run: |
        sed 's/ghcr.io\/vanilla-os\/core:dev/ghcr.io\/vanilla-os\/core:main/' -i recipe.yml

    - name: Manual VIB setup
      run: |
        echo "Installing Vib version ${{ env.VIB_VERSION }}"
        # Create the necessary directories
        sudo mkdir -p /usr/share/vib/plugins
        
        # Download and extract the vib binary
        curl -sL "https://github.com/Vanilla-OS/Vib/releases/download/${{ env.VIB_VERSION }}/vib-amd64" | sudo tee /usr/local/bin/vib > /dev/null
        sudo chmod +x /usr/local/bin/vib
        
        # Download and extract the core plugins
        # Note: The core plugins archive was renamed in later versions.
        # This assumes the format used in v1.0.2.
        curl -sL "https://github.com/Vanilla-OS/Vib/releases/download/${{ env.VIB_VERSION }}/plugins-amd64.tar.gz" | sudo tar -xz -C /usr/share/vib/plugins/
        
        # Download and install the custom plugin (vib-fsguard)
        curl -sL "https://github.com/Vanilla-OS/vib-fsguard/releases/download/v1.6.1/fsguard.so" | sudo tee /usr/share/vib/plugins/fsguard.so > /dev/null
        
        # Check that the plugins are present
        echo "Listing contents of /usr/share/vib/plugins/"
        ls -l /usr/share/vib/plugins/
        
        # Check vib version
        vib --version
        
    - name: Build recipe
      run: vib build recipe.yml

    - uses: actions/upload-artifact@v4
      with:
         name: Containerfile
         path: Containerfile

    - name: Generate image name
      run: |
        REPO_OWNER_LOWERCASE="$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')"
        echo "REPO_OWNER_LOWERCASE=$REPO_OWNER_LOWERCASE" >> "$GITHUB_ENV"
        echo "IMAGE_URL=ghcr.io/$REPO_OWNER_LOWERCASE/desktop" >> "$GITHUB_ENV"

    - name: Extra image tag branch
      if: ${{ github.ref_type != 'tag' }}
      run: |
        echo "EXTRA_TAG=ref,event=branch" >> "$GITHUB_ENV"

    - name: Extra image tag release
      if: ${{ github.ref_type == 'tag' }}
      run: |
        echo "EXTRA_TAG=raw,main" >> "$GITHUB_ENV"

    - name: Login to GitHub Package Registry with Podman
      uses: redhat-actions/podman-login@v1
      if: ${{ github.event_name != 'pull_request' }}
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io

    - name: Build and Push the Podman image
      id: push
      run: |
        TAGS=""
        # Generate semantic versioning tags
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          TAGS+="--tag ${{ env.IMAGE_URL }}:$(echo ${{ github.ref_name }} | sed 's/v//') "
          TAGS+="--tag ${{ env.IMAGE_URL }}:$(echo ${{ github.ref_name }} | sed -E 's/v?([0-9]+\.[0-9]+)\.[0-9]+/\1/') "
        fi
        # Add branch-based tag for non-tag pushes
        if [[ "${{ github.ref_type }}" != "tag" ]]; then
          BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/refs\/heads\///g')
          TAGS+="--tag ${{ env.IMAGE_URL }}:$BRANCH_NAME "
        fi
        
        podman build --file Containerfile ${TAGS} --platform linux/amd64 .

        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          podman push ${TAGS} --all
          DIGEST=$(podman images --digests --format "{{.Digest}}" | head -n 1)
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
        fi
    
    - name: Attest pushed image
      uses: actions/attest-build-provenance@v2
      id: attest
      if: ${{ github.event_name != 'pull_request' }}
      with:
        subject-name: ${{ env.IMAGE_URL }}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: false

  differ:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/vanilla-os/desktop:main
    if: github.repository == 'vanilla-os/desktop-image' && github.ref_type == 'tag'
    needs: build

    steps:
      - uses: actions/checkout@v5

      - name: Generate package diff
        run: |
          lpkg --unlock
          PACKAGE_LIST=$(.github/gen_package_list.sh)
          apt-get install -y curl
          IMAGE_DIGEST=$(curl -s -L -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/orgs/Vanilla-OS/packages/container/desktop/versions | grep -m1 name | sed -E 's/^\s*"name": "(.+)".*$/\1/')
          curl -X POST \
          -H 'Accept:application/json' \
          -H "Authorization:Basic $(echo -n "${{ secrets.DIFFER_USER }}:${{ secrets.DIFFER_PSW }}" | base64)" \
          -d "{\"digest\":\"${IMAGE_DIGEST}\",${PACKAGE_LIST}}" \
          ${{ vars.DIFFER_URL }}/images/desktop/new
          lpkg --lock
